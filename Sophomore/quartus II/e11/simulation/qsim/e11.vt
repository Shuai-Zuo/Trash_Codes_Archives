// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/06/2019 09:13:37"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    e11
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module e11_vlg_sample_tst(
	clk_50MHz,
	en,
	rst,
	rst_freq,
	swr,
	sampler_tx
);
input  clk_50MHz;
input  en;
input  rst;
input  rst_freq;
input [3:0] swr;
output sampler_tx;

reg sample;
time current_time;
always @(clk_50MHz or en or rst or rst_freq or swr)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module e11_vlg_check_tst (
	QA,
	QB,
	QC,
	QD,
	QE,
	QF,
	QG,
	QH,
	a,
	b,
	c,
	d,
	e,
	f,
	g,
	h,
	swc,
	sampler_rx
);
input  QA;
input  QB;
input  QC;
input  QD;
input  QE;
input  QF;
input  QG;
input  QH;
input  a;
input  b;
input  c;
input  d;
input  e;
input  f;
input  g;
input  h;
input [3:0] swc;
input sampler_rx;

reg  QA_expected;
reg  QB_expected;
reg  QC_expected;
reg  QD_expected;
reg  QE_expected;
reg  QF_expected;
reg  QG_expected;
reg  QH_expected;
reg  a_expected;
reg  b_expected;
reg  c_expected;
reg  d_expected;
reg  e_expected;
reg  f_expected;
reg  g_expected;
reg  h_expected;
reg [3:0] swc_expected;

reg  QA_prev;
reg  QB_prev;
reg  QC_prev;
reg  QD_prev;
reg  QE_prev;
reg  QF_prev;
reg  QG_prev;
reg  QH_prev;
reg  a_prev;
reg  b_prev;
reg  c_prev;
reg  d_prev;
reg  e_prev;
reg  f_prev;
reg  g_prev;
reg  h_prev;
reg [3:0] swc_prev;

reg [3:0] swc_expected_prev;

reg [3:0] last_swc_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:17] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 17'b1;
end

// update real /o prevs

always @(trigger)
begin
	QA_prev = QA;
	QB_prev = QB;
	QC_prev = QC;
	QD_prev = QD;
	QE_prev = QE;
	QF_prev = QF;
	QG_prev = QG;
	QH_prev = QH;
	a_prev = a;
	b_prev = b;
	c_prev = c;
	d_prev = d;
	e_prev = e;
	f_prev = f;
	g_prev = g;
	h_prev = h;
	swc_prev = swc;
end

// update expected /o prevs

always @(trigger)
begin
	swc_expected_prev = swc_expected;
end


// expected swc[ 3 ]
initial
begin
	swc_expected[3] = 1'bX;
end 
// expected swc[ 2 ]
initial
begin
	swc_expected[2] = 1'bX;
end 
// expected swc[ 1 ]
initial
begin
	swc_expected[1] = 1'bX;
end 
// expected swc[ 0 ]
initial
begin
	swc_expected[0] = 1'bX;
end 
// generate trigger
always @(QA_expected or QA or QB_expected or QB or QC_expected or QC or QD_expected or QD or QE_expected or QE or QF_expected or QF or QG_expected or QG or QH_expected or QH or a_expected or a or b_expected or b or c_expected or c or d_expected or d or e_expected or e or f_expected or f or g_expected or g or h_expected or h or swc_expected or swc)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected QA = %b | expected QB = %b | expected QC = %b | expected QD = %b | expected QE = %b | expected QF = %b | expected QG = %b | expected QH = %b | expected a = %b | expected b = %b | expected c = %b | expected d = %b | expected e = %b | expected f = %b | expected g = %b | expected h = %b | expected swc = %b | ",QA_expected_prev,QB_expected_prev,QC_expected_prev,QD_expected_prev,QE_expected_prev,QF_expected_prev,QG_expected_prev,QH_expected_prev,a_expected_prev,b_expected_prev,c_expected_prev,d_expected_prev,e_expected_prev,f_expected_prev,g_expected_prev,h_expected_prev,swc_expected_prev);
	$display("| real QA = %b | real QB = %b | real QC = %b | real QD = %b | real QE = %b | real QF = %b | real QG = %b | real QH = %b | real a = %b | real b = %b | real c = %b | real d = %b | real e = %b | real f = %b | real g = %b | real h = %b | real swc = %b | ",QA_prev,QB_prev,QC_prev,QD_prev,QE_prev,QF_prev,QG_prev,QH_prev,a_prev,b_prev,c_prev,d_prev,e_prev,f_prev,g_prev,h_prev,swc_prev);
`endif
	if (
		( swc_expected_prev[0] !== 1'bx ) && ( swc_prev[0] !== swc_expected_prev[0] )
		&& ((swc_expected_prev[0] !== last_swc_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port swc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", swc_expected_prev);
		$display ("     Real value = %b", swc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_swc_exp[0] = swc_expected_prev[0];
	end
	if (
		( swc_expected_prev[1] !== 1'bx ) && ( swc_prev[1] !== swc_expected_prev[1] )
		&& ((swc_expected_prev[1] !== last_swc_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port swc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", swc_expected_prev);
		$display ("     Real value = %b", swc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_swc_exp[1] = swc_expected_prev[1];
	end
	if (
		( swc_expected_prev[2] !== 1'bx ) && ( swc_prev[2] !== swc_expected_prev[2] )
		&& ((swc_expected_prev[2] !== last_swc_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port swc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", swc_expected_prev);
		$display ("     Real value = %b", swc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_swc_exp[2] = swc_expected_prev[2];
	end
	if (
		( swc_expected_prev[3] !== 1'bx ) && ( swc_prev[3] !== swc_expected_prev[3] )
		&& ((swc_expected_prev[3] !== last_swc_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port swc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", swc_expected_prev);
		$display ("     Real value = %b", swc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_swc_exp[3] = swc_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module e11_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_50MHz;
reg en;
reg rst;
reg rst_freq;
reg [3:0] swr;
// wires                                               
wire QA;
wire QB;
wire QC;
wire QD;
wire QE;
wire QF;
wire QG;
wire QH;
wire a;
wire b;
wire c;
wire d;
wire e;
wire f;
wire g;
wire h;
wire [3:0] swc;

wire sampler;                             

// assign statements (if any)                          
e11 i1 (
// port map - connection between master ports and signals/registers   
	.QA(QA),
	.QB(QB),
	.QC(QC),
	.QD(QD),
	.QE(QE),
	.QF(QF),
	.QG(QG),
	.QH(QH),
	.a(a),
	.b(b),
	.c(c),
	.clk_50MHz(clk_50MHz),
	.d(d),
	.e(e),
	.en(en),
	.f(f),
	.g(g),
	.h(h),
	.rst(rst),
	.rst_freq(rst_freq),
	.swc(swc),
	.swr(swr)
);
// swr[ 3 ]
initial
begin
	swr[3] = 1'b1;
end 
// swr[ 2 ]
initial
begin
	swr[2] = 1'b1;
end 
// swr[ 1 ]
initial
begin
	swr[1] = 1'b1;
end 
// swr[ 0 ]
initial
begin
	swr[0] = 1'b1;
	swr[0] = #370000 1'b0;
	swr[0] = #240000 1'b1;
end 

// rst
initial
begin
	rst = 1'b1;
end 

e11_vlg_sample_tst tb_sample (
	.clk_50MHz(clk_50MHz),
	.en(en),
	.rst(rst),
	.rst_freq(rst_freq),
	.swr(swr),
	.sampler_tx(sampler)
);

e11_vlg_check_tst tb_out(
	.QA(QA),
	.QB(QB),
	.QC(QC),
	.QD(QD),
	.QE(QE),
	.QF(QF),
	.QG(QG),
	.QH(QH),
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.e(e),
	.f(f),
	.g(g),
	.h(h),
	.swc(swc),
	.sampler_rx(sampler)
);
endmodule

