// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/12/2019 21:33:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    floor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module floor_vlg_sample_tst(
	current_floor,
	opnd,
	request_in,
	request_out_down,
	request_out_up,
	rst,
	sampler_tx
);
input [1:0] current_floor;
input  opnd;
input [3:0] request_in;
input [2:0] request_out_down;
input [2:0] request_out_up;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(current_floor or opnd or request_in or request_out_down or request_out_up or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module floor_vlg_check_tst (
	request_in_seq,
	request_out_seq,
	sampler_rx
);
input [3:0] request_in_seq;
input [5:0] request_out_seq;
input sampler_rx;

reg [3:0] request_in_seq_expected;
reg [5:0] request_out_seq_expected;

reg [3:0] request_in_seq_prev;
reg [5:0] request_out_seq_prev;

reg [3:0] request_in_seq_expected_prev;
reg [5:0] request_out_seq_expected_prev;

reg [3:0] last_request_in_seq_exp;
reg [5:0] last_request_out_seq_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	request_in_seq_prev = request_in_seq;
	request_out_seq_prev = request_out_seq;
end

// update expected /o prevs

always @(trigger)
begin
	request_in_seq_expected_prev = request_in_seq_expected;
	request_out_seq_expected_prev = request_out_seq_expected;
end


// expected request_in_seq[ 3 ]
initial
begin
	request_in_seq_expected[3] = 1'bX;
end 
// expected request_in_seq[ 2 ]
initial
begin
	request_in_seq_expected[2] = 1'bX;
end 
// expected request_in_seq[ 1 ]
initial
begin
	request_in_seq_expected[1] = 1'bX;
end 
// expected request_in_seq[ 0 ]
initial
begin
	request_in_seq_expected[0] = 1'bX;
end 
// expected request_out_seq[ 5 ]
initial
begin
	request_out_seq_expected[5] = 1'bX;
end 
// expected request_out_seq[ 4 ]
initial
begin
	request_out_seq_expected[4] = 1'bX;
end 
// expected request_out_seq[ 3 ]
initial
begin
	request_out_seq_expected[3] = 1'bX;
end 
// expected request_out_seq[ 2 ]
initial
begin
	request_out_seq_expected[2] = 1'bX;
end 
// expected request_out_seq[ 1 ]
initial
begin
	request_out_seq_expected[1] = 1'bX;
end 
// expected request_out_seq[ 0 ]
initial
begin
	request_out_seq_expected[0] = 1'bX;
end 
// generate trigger
always @(request_in_seq_expected or request_in_seq or request_out_seq_expected or request_out_seq)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected request_in_seq = %b | expected request_out_seq = %b | ",request_in_seq_expected_prev,request_out_seq_expected_prev);
	$display("| real request_in_seq = %b | real request_out_seq = %b | ",request_in_seq_prev,request_out_seq_prev);
`endif
	if (
		( request_in_seq_expected_prev[0] !== 1'bx ) && ( request_in_seq_prev[0] !== request_in_seq_expected_prev[0] )
		&& ((request_in_seq_expected_prev[0] !== last_request_in_seq_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port request_in_seq[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", request_in_seq_expected_prev);
		$display ("     Real value = %b", request_in_seq_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_request_in_seq_exp[0] = request_in_seq_expected_prev[0];
	end
	if (
		( request_in_seq_expected_prev[1] !== 1'bx ) && ( request_in_seq_prev[1] !== request_in_seq_expected_prev[1] )
		&& ((request_in_seq_expected_prev[1] !== last_request_in_seq_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port request_in_seq[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", request_in_seq_expected_prev);
		$display ("     Real value = %b", request_in_seq_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_request_in_seq_exp[1] = request_in_seq_expected_prev[1];
	end
	if (
		( request_in_seq_expected_prev[2] !== 1'bx ) && ( request_in_seq_prev[2] !== request_in_seq_expected_prev[2] )
		&& ((request_in_seq_expected_prev[2] !== last_request_in_seq_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port request_in_seq[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", request_in_seq_expected_prev);
		$display ("     Real value = %b", request_in_seq_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_request_in_seq_exp[2] = request_in_seq_expected_prev[2];
	end
	if (
		( request_in_seq_expected_prev[3] !== 1'bx ) && ( request_in_seq_prev[3] !== request_in_seq_expected_prev[3] )
		&& ((request_in_seq_expected_prev[3] !== last_request_in_seq_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port request_in_seq[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", request_in_seq_expected_prev);
		$display ("     Real value = %b", request_in_seq_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_request_in_seq_exp[3] = request_in_seq_expected_prev[3];
	end
	if (
		( request_out_seq_expected_prev[0] !== 1'bx ) && ( request_out_seq_prev[0] !== request_out_seq_expected_prev[0] )
		&& ((request_out_seq_expected_prev[0] !== last_request_out_seq_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port request_out_seq[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", request_out_seq_expected_prev);
		$display ("     Real value = %b", request_out_seq_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_request_out_seq_exp[0] = request_out_seq_expected_prev[0];
	end
	if (
		( request_out_seq_expected_prev[1] !== 1'bx ) && ( request_out_seq_prev[1] !== request_out_seq_expected_prev[1] )
		&& ((request_out_seq_expected_prev[1] !== last_request_out_seq_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port request_out_seq[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", request_out_seq_expected_prev);
		$display ("     Real value = %b", request_out_seq_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_request_out_seq_exp[1] = request_out_seq_expected_prev[1];
	end
	if (
		( request_out_seq_expected_prev[2] !== 1'bx ) && ( request_out_seq_prev[2] !== request_out_seq_expected_prev[2] )
		&& ((request_out_seq_expected_prev[2] !== last_request_out_seq_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port request_out_seq[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", request_out_seq_expected_prev);
		$display ("     Real value = %b", request_out_seq_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_request_out_seq_exp[2] = request_out_seq_expected_prev[2];
	end
	if (
		( request_out_seq_expected_prev[3] !== 1'bx ) && ( request_out_seq_prev[3] !== request_out_seq_expected_prev[3] )
		&& ((request_out_seq_expected_prev[3] !== last_request_out_seq_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port request_out_seq[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", request_out_seq_expected_prev);
		$display ("     Real value = %b", request_out_seq_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_request_out_seq_exp[3] = request_out_seq_expected_prev[3];
	end
	if (
		( request_out_seq_expected_prev[4] !== 1'bx ) && ( request_out_seq_prev[4] !== request_out_seq_expected_prev[4] )
		&& ((request_out_seq_expected_prev[4] !== last_request_out_seq_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port request_out_seq[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", request_out_seq_expected_prev);
		$display ("     Real value = %b", request_out_seq_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_request_out_seq_exp[4] = request_out_seq_expected_prev[4];
	end
	if (
		( request_out_seq_expected_prev[5] !== 1'bx ) && ( request_out_seq_prev[5] !== request_out_seq_expected_prev[5] )
		&& ((request_out_seq_expected_prev[5] !== last_request_out_seq_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port request_out_seq[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", request_out_seq_expected_prev);
		$display ("     Real value = %b", request_out_seq_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_request_out_seq_exp[5] = request_out_seq_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module floor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] current_floor;
reg opnd;
reg [3:0] request_in;
reg [2:0] request_out_down;
reg [2:0] request_out_up;
reg rst;
// wires                                               
wire [3:0] request_in_seq;
wire [5:0] request_out_seq;

wire sampler;                             

// assign statements (if any)                          
floor i1 (
// port map - connection between master ports and signals/registers   
	.current_floor(current_floor),
	.opnd(opnd),
	.request_in(request_in),
	.request_in_seq(request_in_seq),
	.request_out_down(request_out_down),
	.request_out_seq(request_out_seq),
	.request_out_up(request_out_up),
	.rst(rst)
);

// rst
initial
begin
	rst = 1'b1;
	rst = #20000 1'b0;
end 
// current_floor[ 1 ]
initial
begin
	current_floor[1] = 1'b0;
end 
// current_floor[ 0 ]
initial
begin
	current_floor[0] = 1'b0;
end 

// opnd
initial
begin
	opnd = 1'b0;
end 
// request_in[ 3 ]
initial
begin
	request_in[3] = 1'b0;
end 
// request_in[ 2 ]
initial
begin
	request_in[2] = 1'b0;
end 
// request_in[ 1 ]
initial
begin
	request_in[1] = 1'b1;
end 
// request_in[ 0 ]
initial
begin
	request_in[0] = 1'b0;
end 
// request_out_down[ 2 ]
initial
begin
	request_out_down[2] = 1'b1;
	request_out_down[2] = #500000 1'b0;
end 
// request_out_down[ 1 ]
initial
begin
	request_out_down[1] = 1'b0;
end 
// request_out_down[ 0 ]
initial
begin
	request_out_down[0] = 1'b0;
end 
// request_out_up[ 2 ]
initial
begin
	request_out_up[2] = 1'b0;
end 
// request_out_up[ 1 ]
initial
begin
	request_out_up[1] = 1'b0;
	request_out_up[1] = #500000 1'b1;
end 
// request_out_up[ 0 ]
initial
begin
	request_out_up[0] = 1'b0;
end 

floor_vlg_sample_tst tb_sample (
	.current_floor(current_floor),
	.opnd(opnd),
	.request_in(request_in),
	.request_out_down(request_out_down),
	.request_out_up(request_out_up),
	.rst(rst),
	.sampler_tx(sampler)
);

floor_vlg_check_tst tb_out(
	.request_in_seq(request_in_seq),
	.request_out_seq(request_out_seq),
	.sampler_rx(sampler)
);
endmodule

