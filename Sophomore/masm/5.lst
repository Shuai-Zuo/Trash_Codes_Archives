Microsoft (R) Macro Assembler Version 6.11		    07/25/20 13:20:44
tempfile.asm						     Page 1 - 1


 0000				DATAS SEGMENT
 0000 0A 49 6E 76 61 6C		   	MSGERR DB 0AH,'Invalid Input!',0ah,'$'
       69 64 20 49 6E 70
       75 74 21 0A 24
 0011 49 6E 70 75 74 20		   	MSGIN1 DB 'Input numbers:$'
       6E 75 6D 62 65 72
       73 3A 24
 0020 54 68 65 20 4F 72		   	MSGOUT DB 'The Order is:$'
       64 65 72 20 69 73
       3A 24
 002E  000A [			   	BUF DW 10 DUP(0FFFFH)
        FFFF
       ]
 0042 00			   	COUNT DB 0
 0043 00			   	COUNT1 DB 0
 0044 00			   	COUNT2 DB 0
 0045 00				NUMB  DB  0
 0046				DATAS ENDS

 0000				STACKS SEGMENT
 0000  0100 [			     DW 100H DUP(0)
        0000
       ]
 0200				STACKS ENDS


 0000				CODES SEGMENT
				    ASSUME CS:CODES,DS:DATAS,SS:STACKS
 0000				START:
 0000  B8 ---- R		    MOV AX,DATAS
 0003  8E D8			    MOV DS,AX
 0005  8D 3E 002E R		    LEA DI,BUF[0]
 0009  B9 000A			    MOV CX,0AH
 000C  8D 16 0011 R		    LEA DX,MSGIN1
 0010  B4 09			    MOV AH,09H
 0012  CD 21			    INT 21H
 0014				LP1:
 0014  E8 0061			    CALL READ1
 0017  89 15			    MOV [DI],DX
 0019  33 D2			    XOR DX,DX 
 001B  47			    INC DI
 001C  47			    INC DI
 001D  49			    DEC CX
 001E  83 F9 00			 	CMP CX,0
 0021  75 F1			 	JNE LP1  ;逐个录入10个数
 0023  E8 000D				CALL SORT ;排序
 0026  B2 0A				MOV DL,0AH
 0028  B4 02			    MOV AH,02H
 002A  CD 21			    INT 21H  
 002C  E8 00B3				CALL PRINT;输出
 002F  B4 4C			    MOV AH,4CH
 0031  CD 21			    INT 21H
				    
 0033				SORT  PROC NEAR;冒泡排序
 0033  50				PUSH AX 
 0034  53				PUSH BX
 0035  51				PUSH CX
 0036					LOP1:  
 0036  C6 06 0044 R 00			MOV COUNT2,0D 
 003B  8D 36 002E R			LEA SI,BUF[0]
 003F  83 EE 02				SUB SI,2H
 0042  FE 06 0043 R			INC COUNT1
 0046  80 3E 0043 R 0A			CMP COUNT1,10D;内层循环10次
 004B  74 23				JZ NEX 
 004D					LOP2:  
 004D  FE 06 0044 R			INC COUNT2
 0051  83 C6 02				ADD SI,2H
 0054  80 3E 0044 R 0A			CMP COUNT2,10D;外层循环10次
 0059  74 DB				JZ LOP1
 005B  8B 5C 02				MOV BX,[SI+2H]
 005E  39 1C				CMP [SI],BX
 0060  7F 02				JG SWAP ;若[si]大于[si+2h]则调用swap，否则继续循环
 0062  EB E9				JMP LOP2
 0064					SWAP:  
 0064  8B 04				MOV AX,[SI]
 0066  8B 4C 02				MOV CX,[SI+2H]
 0069  89 0C				MOV [SI],CX
 006B  89 44 02				MOV [SI+2H],AX;通过中间寄存器交换[SI+2H]与[SI]
 006E  EB DD				JMP LOP2
 0070					NEX:  
 0070  59				POP CX
 0071  5B				POP BX
 0072  58				POP AX
 0073  8B 16 002E R			MOV DX,BUF[0]
 0077  C3				RET
 0078				SORT  ENDP    
				    
				    
				    
				    
 0078				READ1 PROC NEAR
 0078  EB 0C				JMP BEG1
 007A				ERR: 
 007A  8D 16 0000 R			LEA DX,MSGERR
 007E  B4 09			    MOV AH,09H
 0080  CD 21			    INT 21H
 0082  32 E4			    XOR AH,AH
 0084  33 D2			    XOR DX,DX
 0086				BEG1:
 0086  B4 01			    MOV AH,01H
 0088  CD 21			    INT 21H
 008A  3C 30			    CMP AL,'0'
 008C  72 EC			    JB ERR
 008E  3C 39			    CMP AL,'9'
 0090  77 E8			    JA ERR;判断是否为数字
 0092  8A D0			    MOV DL,AL
 0094  80 EA 30			    SUB DL,30H
 0097  B4 01			    MOV AH,01H
 0099  CD 21			    INT 21H
				    ;CMP AL,0DH
				    ;JZ DONE
				    ;CMP AL,' '
				    ;JZ DONE
 009B  3C 30			    CMP AL,'0'
 009D  72 DB			    JB ERR
 009F  3C 39			    CMP AL,'9'
 00A1  77 D7			    JA ERR;判断是否为数字
 00A3  2C 30			    SUB AL,30H
 00A5  D1 E2			    SHL DX,1
 00A7  8B DA			    MOV BX,DX
 00A9  D1 E2			    SHL DX,1
 00AB  D1 E2			    SHL DX,1;转换为数字后乘16
 00AD  03 D3			    ADD DX,BX;加低位
 00AF  32 E4			    XOR AH,AH
 00B1  03 D0			    ADD DX,AX
 00B3  B4 01			    MOV AH,01H
 00B5  CD 21			    INT 21H
 00B7  3C 0D			    CMP AL,0DH
 00B9  74 24			    JZ DONE
 00BB  3C 20			    CMP AL,' '
 00BD  74 20			    JZ DONE
 00BF  3C 30			    CMP AL,'0'
 00C1  72 B7			    JB ERR
 00C3  3C 39			    CMP AL,'9'
 00C5  77 B3			    JA ERR;判断是否为数字
 00C7  2C 30			    SUB AL,30H
 00C9  D1 E2			    SHL DX,1
 00CB  8B DA			    MOV BX,DX
 00CD  D1 E2			    SHL DX,1
 00CF  D1 E2			    SHL DX,1
 00D1  03 D3			    ADD DX,BX;转换为数字后乘16
 00D3  32 E4			    XOR AH,AH
 00D5  03 D0			    ADD DX,AX ;加低位
 00D7  52			    PUSH DX
 00D8  B2 20			    MOV DL,' '
 00DA  B4 02			    MOV AH,02H
 00DC  CD 21			    INT 21H
 00DE  5A			    POP DX
 00DF				DONE:
 00DF  32 E4			    XOR AH,AH
 00E1  C3				RET
 00E2				READ1 ENDP
				   
				   
				   
 00E2				PRINT PROC NEAR
 00E2  8D 16 0020 R			LEA DX,MSGOUT
 00E6  B4 09			    MOV AH,09H
 00E8  CD 21			    INT 21H
 00EA  8D 36 002E R		  	LEA SI,BUF[0]
 00EE				LOP:  
 00EE  80 3E 0042 R 0A			CMP COUNT,0AH
 00F3  73 64				JAE EXIT
 00F5  BB 000A			  	MOV BX,0AH
 00F8  8B 04			  	MOV AX,[SI]
 00FA  33 D2			  	XOR DX,DX
 00FC  F7 F3			  	DIV BX;除10获得十位部分
 00FE  83 F8 0A			  	CMP AX,0AH
 0101  73 23			  	JAE BIG1;若十位大于10则计算百位部分
 0103  8A F2			    MOV DH,DL
 0105  8A D0			  	MOV DL,AL
 0107  80 C2 30			  	ADD DL,30H;加30h转换为字符输出
 010A  B4 02			    MOV AH,02H
 010C  CD 21			    INT 21H
 010E  8A D6			    MOV DL,DH
 0110  80 C2 30			    ADD DL,30H;个位部分加30h转换为字符输出
 0113  B4 02			    MOV AH,02H
 0115  CD 21			    INT 21H
 0117  83 C6 02			    ADD SI,02H
 011A  FE 06 0042 R		    INC COUNT
 011E  B2 20			    MOV DL,' ';输出‘ ’
 0120  B4 02			    MOV AH,02H
 0122  CD 21			    INT 21H
 0124  EB C8			    JMP LOP	
 0126				BIG1:
 0126  52				PUSH DX
 0127  BB 000A				MOV BX,0AH
 012A  33 D2				XOR DX,DX
 012C  F7 F3				DIV BX;除10获得百位部分
 012E  8A F2				MOV DH,DL
 0130  8A D0			  	MOV DL,AL
 0132  80 C2 30			  	ADD DL,30H;加30h转换为字符输出
 0135  B4 02			    MOV AH,02H
 0137  CD 21			    INT 21H
 0139  8A D6			    MOV DL,DH
 013B  80 C2 30			    ADD DL,30H;十位部分加30h转换为字符输出
 013E  B4 02			    MOV AH,02H
 0140  CD 21			    INT 21H
 0142  5A			    POP DX;个位部分出栈
 0143  80 C2 30			    ADD DL,30H;个位部分加30h转换为字符输出
 0146  B4 02			    MOV AH,02H
 0148  CD 21			    INT 21H
 014A  83 C6 02			    ADD SI,02H
 014D  FE 06 0042 R		    INC COUNT
 0151  B2 20			    MOV DL,' ';输出‘ ’
 0153  B4 02			    MOV AH,02H
 0155  CD 21			    INT 21H
 0157  EB 95			    JMP LOP
 0159				EXIT:
 0159  C3				RET  	
 015A				PRINT ENDP      
 015A				CODES ENDS
				    END START













Microsoft (R) Macro Assembler Version 6.11		    07/25/20 13:20:44
tempfile.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CODES  . . . . . . . . . . . . .	16 Bit	 015A	  Para	  Private 
DATAS  . . . . . . . . . . . . .	16 Bit	 0046	  Para	  Private 
STACKS . . . . . . . . . . . . .	16 Bit	 0200	  Para	  Private 


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

PRINT  . . . . . . . . . . . . .	P Near	 00E2	  CODES	Length= 0078 Public
  LOP  . . . . . . . . . . . . .	L Near	 00EE	  CODES	
  BIG1 . . . . . . . . . . . . .	L Near	 0126	  CODES	
  EXIT . . . . . . . . . . . . .	L Near	 0159	  CODES	
READ1  . . . . . . . . . . . . .	P Near	 0078	  CODES	Length= 006A Public
  ERR  . . . . . . . . . . . . .	L Near	 007A	  CODES	
  BEG1 . . . . . . . . . . . . .	L Near	 0086	  CODES	
  DONE . . . . . . . . . . . . .	L Near	 00DF	  CODES	
SORT . . . . . . . . . . . . . .	P Near	 0033	  CODES	Length= 0045 Public
  LOP1 . . . . . . . . . . . . .	L Near	 0036	  CODES	
  LOP2 . . . . . . . . . . . . .	L Near	 004D	  CODES	
  SWAP . . . . . . . . . . . . .	L Near	 0064	  CODES	
  NEX  . . . . . . . . . . . . .	L Near	 0070	  CODES	


Symbols:

                N a m e                 Type     Value    Attr

BUF  . . . . . . . . . . . . . .	Word	 002E	  DATAS	
COUNT1 . . . . . . . . . . . . .	Byte	 0043	  DATAS	
COUNT2 . . . . . . . . . . . . .	Byte	 0044	  DATAS	
COUNT  . . . . . . . . . . . . .	Byte	 0042	  DATAS	
LP1  . . . . . . . . . . . . . .	L Near	 0014	  CODES	
MSGERR . . . . . . . . . . . . .	Byte	 0000	  DATAS	
MSGIN1 . . . . . . . . . . . . .	Byte	 0011	  DATAS	
MSGOUT . . . . . . . . . . . . .	Byte	 0020	  DATAS	
NUMB . . . . . . . . . . . . . .	Byte	 0045	  DATAS	
START  . . . . . . . . . . . . .	L Near	 0000	  CODES	

	   0 Warnings
	   0 Errors
