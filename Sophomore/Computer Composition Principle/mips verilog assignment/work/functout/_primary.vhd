library verilog;
use verilog.vl_types.all;
entity functout is
    generic(
        \IF\            : vl_logic_vector(3 downto 0) := (Hi0, Hi0, Hi0, Hi0);
        ID              : vl_logic_vector(3 downto 0) := (Hi0, Hi0, Hi0, Hi1);
        MA              : vl_logic_vector(3 downto 0) := (Hi0, Hi0, Hi1, Hi0);
        MR              : vl_logic_vector(3 downto 0) := (Hi0, Hi0, Hi1, Hi1);
        MemWB           : vl_logic_vector(3 downto 0) := (Hi0, Hi1, Hi0, Hi0);
        MW              : vl_logic_vector(3 downto 0) := (Hi0, Hi1, Hi0, Hi1);
        Exe             : vl_logic_vector(3 downto 0) := (Hi0, Hi1, Hi1, Hi0);
        WB              : vl_logic_vector(3 downto 0) := (Hi0, Hi1, Hi1, Hi1);
        Branch          : vl_logic_vector(3 downto 0) := (Hi1, Hi0, Hi0, Hi0);
        Jump            : vl_logic_vector(3 downto 0) := (Hi1, Hi0, Hi0, Hi1);
        R               : vl_logic_vector(5 downto 0) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        addu            : vl_logic_vector(5 downto 0) := (Hi1, Hi0, Hi0, Hi0, Hi0, Hi1);
        subu            : vl_logic_vector(5 downto 0) := (Hi1, Hi0, Hi0, Hi0, Hi1, Hi1);
        slt             : vl_logic_vector(5 downto 0) := (Hi1, Hi0, Hi1, Hi0, Hi1, Hi0);
        jr              : vl_logic_vector(5 downto 0) := (Hi0, Hi0, Hi1, Hi0, Hi0, Hi0);
        addi            : vl_logic_vector(5 downto 0) := (Hi0, Hi0, Hi1, Hi0, Hi0, Hi0);
        addiu           : vl_logic_vector(5 downto 0) := (Hi0, Hi0, Hi1, Hi0, Hi0, Hi1);
        ori             : vl_logic_vector(5 downto 0) := (Hi0, Hi0, Hi1, Hi1, Hi0, Hi1);
        lui             : vl_logic_vector(5 downto 0) := (Hi0, Hi0, Hi1, Hi1, Hi1, Hi1);
        sw              : vl_logic_vector(5 downto 0) := (Hi1, Hi0, Hi1, Hi0, Hi1, Hi1);
        lw              : vl_logic_vector(5 downto 0) := (Hi1, Hi0, Hi0, Hi0, Hi1, Hi1);
        sb              : vl_logic_vector(5 downto 0) := (Hi1, Hi0, Hi1, Hi0, Hi0, Hi0);
        lb              : vl_logic_vector(5 downto 0) := (Hi1, Hi0, Hi0, Hi0, Hi0, Hi0);
        beq             : vl_logic_vector(5 downto 0) := (Hi0, Hi0, Hi0, Hi1, Hi0, Hi0);
        j               : vl_logic_vector(5 downto 0) := (Hi0, Hi0, Hi0, Hi0, Hi1, Hi0);
        jal             : vl_logic_vector(5 downto 0) := (Hi0, Hi0, Hi0, Hi0, Hi1, Hi1);
        jalr            : vl_logic_vector(5 downto 0) := (Hi0, Hi0, Hi1, Hi0, Hi0, Hi1)
    );
    port(
        state           : in     vl_logic_vector(3 downto 0);
        opcode          : in     vl_logic_vector(5 downto 0);
        funct           : in     vl_logic_vector(5 downto 0);
        zero            : in     vl_logic;
        PCWr            : out    vl_logic;
        IRWr            : out    vl_logic;
        MemtoReg        : out    vl_logic_vector(1 downto 0);
        RegWr           : out    vl_logic;
        ALUsrc          : out    vl_logic;
        MemWr           : out    vl_logic;
        Extop           : out    vl_logic;
        RegDst          : out    vl_logic_vector(1 downto 0);
        npc_sel         : out    vl_logic_vector(2 downto 0);
        ALUctr          : out    vl_logic_vector(2 downto 0);
        sbsel           : out    vl_logic;
        lbsel           : out    vl_logic
    );
    attribute mti_svvh_generic_type : integer;
    attribute mti_svvh_generic_type of \IF\ : constant is 2;
    attribute mti_svvh_generic_type of ID : constant is 2;
    attribute mti_svvh_generic_type of MA : constant is 2;
    attribute mti_svvh_generic_type of MR : constant is 2;
    attribute mti_svvh_generic_type of MemWB : constant is 2;
    attribute mti_svvh_generic_type of MW : constant is 2;
    attribute mti_svvh_generic_type of Exe : constant is 2;
    attribute mti_svvh_generic_type of WB : constant is 2;
    attribute mti_svvh_generic_type of Branch : constant is 2;
    attribute mti_svvh_generic_type of Jump : constant is 2;
    attribute mti_svvh_generic_type of R : constant is 2;
    attribute mti_svvh_generic_type of addu : constant is 2;
    attribute mti_svvh_generic_type of subu : constant is 2;
    attribute mti_svvh_generic_type of slt : constant is 2;
    attribute mti_svvh_generic_type of jr : constant is 2;
    attribute mti_svvh_generic_type of addi : constant is 2;
    attribute mti_svvh_generic_type of addiu : constant is 2;
    attribute mti_svvh_generic_type of ori : constant is 2;
    attribute mti_svvh_generic_type of lui : constant is 2;
    attribute mti_svvh_generic_type of sw : constant is 2;
    attribute mti_svvh_generic_type of lw : constant is 2;
    attribute mti_svvh_generic_type of sb : constant is 2;
    attribute mti_svvh_generic_type of lb : constant is 2;
    attribute mti_svvh_generic_type of beq : constant is 2;
    attribute mti_svvh_generic_type of j : constant is 2;
    attribute mti_svvh_generic_type of jal : constant is 2;
    attribute mti_svvh_generic_type of jalr : constant is 2;
end functout;
