// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/22/2019 22:56:10"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    redw
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module redw_vlg_sample_tst(
	clk,
	gre,
	ldn,
	red,
	rst,
	rst_fre,
	s1,
	s2,
	stop,
	yel,
	sampler_tx
);
input  clk;
input [5:0] gre;
input  ldn;
input [5:0] red;
input  rst;
input  rst_fre;
input  s1;
input  s2;
input  stop;
input [5:0] yel;
output sampler_tx;

reg sample;
time current_time;
always @(clk or gre or ldn or red or rst or rst_fre or s1 or s2 or stop or yel)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module redw_vlg_check_tst (
	count,
	in1,
	in2,
	in4,
	in5,
	lighto1,
	lighto2,
	sampler_rx
);
input [7:0] count;
input [3:0] in1;
input [3:0] in2;
input [3:0] in4;
input [3:0] in5;
input [2:0] lighto1;
input [2:0] lighto2;
input sampler_rx;

reg [7:0] count_expected;
reg [3:0] in1_expected;
reg [3:0] in2_expected;
reg [3:0] in4_expected;
reg [3:0] in5_expected;
reg [2:0] lighto1_expected;
reg [2:0] lighto2_expected;

reg [7:0] count_prev;
reg [3:0] in1_prev;
reg [3:0] in2_prev;
reg [3:0] in4_prev;
reg [3:0] in5_prev;
reg [2:0] lighto1_prev;
reg [2:0] lighto2_prev;

reg [7:0] count_expected_prev;
reg [3:0] in1_expected_prev;
reg [3:0] in2_expected_prev;
reg [3:0] in4_expected_prev;
reg [3:0] in5_expected_prev;
reg [2:0] lighto1_expected_prev;
reg [2:0] lighto2_expected_prev;

reg [7:0] last_count_exp;
reg [3:0] last_in1_exp;
reg [3:0] last_in2_exp;
reg [3:0] last_in4_exp;
reg [3:0] last_in5_exp;
reg [2:0] last_lighto1_exp;
reg [2:0] last_lighto2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	count_prev = count;
	in1_prev = in1;
	in2_prev = in2;
	in4_prev = in4;
	in5_prev = in5;
	lighto1_prev = lighto1;
	lighto2_prev = lighto2;
end

// update expected /o prevs

always @(trigger)
begin
	count_expected_prev = count_expected;
	in1_expected_prev = in1_expected;
	in2_expected_prev = in2_expected;
	in4_expected_prev = in4_expected;
	in5_expected_prev = in5_expected;
	lighto1_expected_prev = lighto1_expected;
	lighto2_expected_prev = lighto2_expected;
end


// expected lighto1[ 2 ]
initial
begin
	lighto1_expected[2] = 1'bX;
end 
// expected lighto1[ 1 ]
initial
begin
	lighto1_expected[1] = 1'bX;
end 
// expected lighto1[ 0 ]
initial
begin
	lighto1_expected[0] = 1'bX;
end 
// expected lighto2[ 2 ]
initial
begin
	lighto2_expected[2] = 1'bX;
end 
// expected lighto2[ 1 ]
initial
begin
	lighto2_expected[1] = 1'bX;
end 
// expected lighto2[ 0 ]
initial
begin
	lighto2_expected[0] = 1'bX;
end 
// expected count[ 7 ]
initial
begin
	count_expected[7] = 1'bX;
end 
// expected count[ 6 ]
initial
begin
	count_expected[6] = 1'bX;
end 
// expected count[ 5 ]
initial
begin
	count_expected[5] = 1'bX;
end 
// expected count[ 4 ]
initial
begin
	count_expected[4] = 1'bX;
end 
// expected count[ 3 ]
initial
begin
	count_expected[3] = 1'bX;
end 
// expected count[ 2 ]
initial
begin
	count_expected[2] = 1'bX;
end 
// expected count[ 1 ]
initial
begin
	count_expected[1] = 1'bX;
end 
// expected count[ 0 ]
initial
begin
	count_expected[0] = 1'bX;
end 
// expected in1[ 3 ]
initial
begin
	in1_expected[3] = 1'bX;
end 
// expected in1[ 2 ]
initial
begin
	in1_expected[2] = 1'bX;
end 
// expected in1[ 1 ]
initial
begin
	in1_expected[1] = 1'bX;
end 
// expected in1[ 0 ]
initial
begin
	in1_expected[0] = 1'bX;
end 
// expected in2[ 3 ]
initial
begin
	in2_expected[3] = 1'bX;
end 
// expected in2[ 2 ]
initial
begin
	in2_expected[2] = 1'bX;
end 
// expected in2[ 1 ]
initial
begin
	in2_expected[1] = 1'bX;
end 
// expected in2[ 0 ]
initial
begin
	in2_expected[0] = 1'bX;
end 
// expected in4[ 3 ]
initial
begin
	in4_expected[3] = 1'bX;
end 
// expected in4[ 2 ]
initial
begin
	in4_expected[2] = 1'bX;
end 
// expected in4[ 1 ]
initial
begin
	in4_expected[1] = 1'bX;
end 
// expected in4[ 0 ]
initial
begin
	in4_expected[0] = 1'bX;
end 
// expected in5[ 3 ]
initial
begin
	in5_expected[3] = 1'bX;
end 
// expected in5[ 2 ]
initial
begin
	in5_expected[2] = 1'bX;
end 
// expected in5[ 1 ]
initial
begin
	in5_expected[1] = 1'bX;
end 
// expected in5[ 0 ]
initial
begin
	in5_expected[0] = 1'bX;
end 
// generate trigger
always @(count_expected or count or in1_expected or in1 or in2_expected or in2 or in4_expected or in4 or in5_expected or in5 or lighto1_expected or lighto1 or lighto2_expected or lighto2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected count = %b | expected in1 = %b | expected in2 = %b | expected in4 = %b | expected in5 = %b | expected lighto1 = %b | expected lighto2 = %b | ",count_expected_prev,in1_expected_prev,in2_expected_prev,in4_expected_prev,in5_expected_prev,lighto1_expected_prev,lighto2_expected_prev);
	$display("| real count = %b | real in1 = %b | real in2 = %b | real in4 = %b | real in5 = %b | real lighto1 = %b | real lighto2 = %b | ",count_prev,in1_prev,in2_prev,in4_prev,in5_prev,lighto1_prev,lighto2_prev);
`endif
	if (
		( count_expected_prev[0] !== 1'bx ) && ( count_prev[0] !== count_expected_prev[0] )
		&& ((count_expected_prev[0] !== last_count_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[0] = count_expected_prev[0];
	end
	if (
		( count_expected_prev[1] !== 1'bx ) && ( count_prev[1] !== count_expected_prev[1] )
		&& ((count_expected_prev[1] !== last_count_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[1] = count_expected_prev[1];
	end
	if (
		( count_expected_prev[2] !== 1'bx ) && ( count_prev[2] !== count_expected_prev[2] )
		&& ((count_expected_prev[2] !== last_count_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[2] = count_expected_prev[2];
	end
	if (
		( count_expected_prev[3] !== 1'bx ) && ( count_prev[3] !== count_expected_prev[3] )
		&& ((count_expected_prev[3] !== last_count_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[3] = count_expected_prev[3];
	end
	if (
		( count_expected_prev[4] !== 1'bx ) && ( count_prev[4] !== count_expected_prev[4] )
		&& ((count_expected_prev[4] !== last_count_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[4] = count_expected_prev[4];
	end
	if (
		( count_expected_prev[5] !== 1'bx ) && ( count_prev[5] !== count_expected_prev[5] )
		&& ((count_expected_prev[5] !== last_count_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[5] = count_expected_prev[5];
	end
	if (
		( count_expected_prev[6] !== 1'bx ) && ( count_prev[6] !== count_expected_prev[6] )
		&& ((count_expected_prev[6] !== last_count_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[6] = count_expected_prev[6];
	end
	if (
		( count_expected_prev[7] !== 1'bx ) && ( count_prev[7] !== count_expected_prev[7] )
		&& ((count_expected_prev[7] !== last_count_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[7] = count_expected_prev[7];
	end
	if (
		( in1_expected_prev[0] !== 1'bx ) && ( in1_prev[0] !== in1_expected_prev[0] )
		&& ((in1_expected_prev[0] !== last_in1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port in1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", in1_expected_prev);
		$display ("     Real value = %b", in1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_in1_exp[0] = in1_expected_prev[0];
	end
	if (
		( in1_expected_prev[1] !== 1'bx ) && ( in1_prev[1] !== in1_expected_prev[1] )
		&& ((in1_expected_prev[1] !== last_in1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port in1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", in1_expected_prev);
		$display ("     Real value = %b", in1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_in1_exp[1] = in1_expected_prev[1];
	end
	if (
		( in1_expected_prev[2] !== 1'bx ) && ( in1_prev[2] !== in1_expected_prev[2] )
		&& ((in1_expected_prev[2] !== last_in1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port in1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", in1_expected_prev);
		$display ("     Real value = %b", in1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_in1_exp[2] = in1_expected_prev[2];
	end
	if (
		( in1_expected_prev[3] !== 1'bx ) && ( in1_prev[3] !== in1_expected_prev[3] )
		&& ((in1_expected_prev[3] !== last_in1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port in1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", in1_expected_prev);
		$display ("     Real value = %b", in1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_in1_exp[3] = in1_expected_prev[3];
	end
	if (
		( in2_expected_prev[0] !== 1'bx ) && ( in2_prev[0] !== in2_expected_prev[0] )
		&& ((in2_expected_prev[0] !== last_in2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port in2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", in2_expected_prev);
		$display ("     Real value = %b", in2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_in2_exp[0] = in2_expected_prev[0];
	end
	if (
		( in2_expected_prev[1] !== 1'bx ) && ( in2_prev[1] !== in2_expected_prev[1] )
		&& ((in2_expected_prev[1] !== last_in2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port in2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", in2_expected_prev);
		$display ("     Real value = %b", in2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_in2_exp[1] = in2_expected_prev[1];
	end
	if (
		( in2_expected_prev[2] !== 1'bx ) && ( in2_prev[2] !== in2_expected_prev[2] )
		&& ((in2_expected_prev[2] !== last_in2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port in2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", in2_expected_prev);
		$display ("     Real value = %b", in2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_in2_exp[2] = in2_expected_prev[2];
	end
	if (
		( in2_expected_prev[3] !== 1'bx ) && ( in2_prev[3] !== in2_expected_prev[3] )
		&& ((in2_expected_prev[3] !== last_in2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port in2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", in2_expected_prev);
		$display ("     Real value = %b", in2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_in2_exp[3] = in2_expected_prev[3];
	end
	if (
		( in4_expected_prev[0] !== 1'bx ) && ( in4_prev[0] !== in4_expected_prev[0] )
		&& ((in4_expected_prev[0] !== last_in4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port in4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", in4_expected_prev);
		$display ("     Real value = %b", in4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_in4_exp[0] = in4_expected_prev[0];
	end
	if (
		( in4_expected_prev[1] !== 1'bx ) && ( in4_prev[1] !== in4_expected_prev[1] )
		&& ((in4_expected_prev[1] !== last_in4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port in4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", in4_expected_prev);
		$display ("     Real value = %b", in4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_in4_exp[1] = in4_expected_prev[1];
	end
	if (
		( in4_expected_prev[2] !== 1'bx ) && ( in4_prev[2] !== in4_expected_prev[2] )
		&& ((in4_expected_prev[2] !== last_in4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port in4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", in4_expected_prev);
		$display ("     Real value = %b", in4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_in4_exp[2] = in4_expected_prev[2];
	end
	if (
		( in4_expected_prev[3] !== 1'bx ) && ( in4_prev[3] !== in4_expected_prev[3] )
		&& ((in4_expected_prev[3] !== last_in4_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port in4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", in4_expected_prev);
		$display ("     Real value = %b", in4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_in4_exp[3] = in4_expected_prev[3];
	end
	if (
		( in5_expected_prev[0] !== 1'bx ) && ( in5_prev[0] !== in5_expected_prev[0] )
		&& ((in5_expected_prev[0] !== last_in5_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port in5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", in5_expected_prev);
		$display ("     Real value = %b", in5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_in5_exp[0] = in5_expected_prev[0];
	end
	if (
		( in5_expected_prev[1] !== 1'bx ) && ( in5_prev[1] !== in5_expected_prev[1] )
		&& ((in5_expected_prev[1] !== last_in5_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port in5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", in5_expected_prev);
		$display ("     Real value = %b", in5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_in5_exp[1] = in5_expected_prev[1];
	end
	if (
		( in5_expected_prev[2] !== 1'bx ) && ( in5_prev[2] !== in5_expected_prev[2] )
		&& ((in5_expected_prev[2] !== last_in5_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port in5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", in5_expected_prev);
		$display ("     Real value = %b", in5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_in5_exp[2] = in5_expected_prev[2];
	end
	if (
		( in5_expected_prev[3] !== 1'bx ) && ( in5_prev[3] !== in5_expected_prev[3] )
		&& ((in5_expected_prev[3] !== last_in5_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port in5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", in5_expected_prev);
		$display ("     Real value = %b", in5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_in5_exp[3] = in5_expected_prev[3];
	end
	if (
		( lighto1_expected_prev[0] !== 1'bx ) && ( lighto1_prev[0] !== lighto1_expected_prev[0] )
		&& ((lighto1_expected_prev[0] !== last_lighto1_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lighto1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lighto1_expected_prev);
		$display ("     Real value = %b", lighto1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_lighto1_exp[0] = lighto1_expected_prev[0];
	end
	if (
		( lighto1_expected_prev[1] !== 1'bx ) && ( lighto1_prev[1] !== lighto1_expected_prev[1] )
		&& ((lighto1_expected_prev[1] !== last_lighto1_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lighto1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lighto1_expected_prev);
		$display ("     Real value = %b", lighto1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_lighto1_exp[1] = lighto1_expected_prev[1];
	end
	if (
		( lighto1_expected_prev[2] !== 1'bx ) && ( lighto1_prev[2] !== lighto1_expected_prev[2] )
		&& ((lighto1_expected_prev[2] !== last_lighto1_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lighto1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lighto1_expected_prev);
		$display ("     Real value = %b", lighto1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_lighto1_exp[2] = lighto1_expected_prev[2];
	end
	if (
		( lighto2_expected_prev[0] !== 1'bx ) && ( lighto2_prev[0] !== lighto2_expected_prev[0] )
		&& ((lighto2_expected_prev[0] !== last_lighto2_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lighto2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lighto2_expected_prev);
		$display ("     Real value = %b", lighto2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_lighto2_exp[0] = lighto2_expected_prev[0];
	end
	if (
		( lighto2_expected_prev[1] !== 1'bx ) && ( lighto2_prev[1] !== lighto2_expected_prev[1] )
		&& ((lighto2_expected_prev[1] !== last_lighto2_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lighto2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lighto2_expected_prev);
		$display ("     Real value = %b", lighto2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_lighto2_exp[1] = lighto2_expected_prev[1];
	end
	if (
		( lighto2_expected_prev[2] !== 1'bx ) && ( lighto2_prev[2] !== lighto2_expected_prev[2] )
		&& ((lighto2_expected_prev[2] !== last_lighto2_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lighto2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lighto2_expected_prev);
		$display ("     Real value = %b", lighto2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_lighto2_exp[2] = lighto2_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module redw_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [5:0] gre;
reg ldn;
reg [5:0] red;
reg rst;
reg rst_fre;
reg s1;
reg s2;
reg stop;
reg [5:0] yel;
// wires                                               
wire [7:0] count;
wire [3:0] in1;
wire [3:0] in2;
wire [3:0] in4;
wire [3:0] in5;
wire [2:0] lighto1;
wire [2:0] lighto2;

wire sampler;                             

// assign statements (if any)                          
redw i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.count(count),
	.gre(gre),
	.in1(in1),
	.in2(in2),
	.in4(in4),
	.in5(in5),
	.ldn(ldn),
	.lighto1(lighto1),
	.lighto2(lighto2),
	.red(red),
	.rst(rst),
	.rst_fre(rst_fre),
	.s1(s1),
	.s2(s2),
	.stop(stop),
	.yel(yel)
);

// clk
always
begin
	clk = 1'b0;
	clk = #2500 1'b1;
	#2500;
end 
// gre[ 5 ]
initial
begin
	gre[5] = 1'b1;
end 
// gre[ 4 ]
initial
begin
	gre[4] = 1'b1;
end 
// gre[ 3 ]
initial
begin
	gre[3] = 1'b1;
end 
// gre[ 2 ]
initial
begin
	gre[2] = 1'b1;
end 
// gre[ 1 ]
initial
begin
	gre[1] = 1'b1;
end 
// gre[ 0 ]
initial
begin
	gre[0] = 1'b1;
end 
// yel[ 5 ]
initial
begin
	yel[5] = 1'b1;
end 
// yel[ 4 ]
initial
begin
	yel[4] = 1'b1;
end 
// yel[ 3 ]
initial
begin
	yel[3] = 1'b1;
end 
// yel[ 2 ]
initial
begin
	yel[2] = 1'b1;
end 
// yel[ 1 ]
initial
begin
	yel[1] = 1'b1;
end 
// yel[ 0 ]
initial
begin
	yel[0] = 1'b1;
end 
// red[ 5 ]
initial
begin
	red[5] = 1'b1;
end 
// red[ 4 ]
initial
begin
	red[4] = 1'b1;
end 
// red[ 3 ]
initial
begin
	red[3] = 1'b1;
end 
// red[ 2 ]
initial
begin
	red[2] = 1'b1;
end 
// red[ 1 ]
initial
begin
	red[1] = 1'b1;
end 
// red[ 0 ]
initial
begin
	red[0] = 1'b1;
end 

// rst
initial
begin
	rst = 1'b1;
end 

// rst_fre
initial
begin
	rst_fre = 1'b0;
end 

// s1
initial
begin
	s1 = 1'b0;
	s1 = #90000 1'b1;
	s1 = #30000 1'b0;
end 

// s2
initial
begin
	s2 = 1'b0;
	s2 = #50000 1'b1;
	s2 = #40000 1'b0;
end 

// ldn
initial
begin
	ldn = 1'b0;
end 

// stop
initial
begin
	stop = 1'b1;
	stop = #190000 1'b0;
	stop = #90000 1'b1;
end 

redw_vlg_sample_tst tb_sample (
	.clk(clk),
	.gre(gre),
	.ldn(ldn),
	.red(red),
	.rst(rst),
	.rst_fre(rst_fre),
	.s1(s1),
	.s2(s2),
	.stop(stop),
	.yel(yel),
	.sampler_tx(sampler)
);

redw_vlg_check_tst tb_out(
	.count(count),
	.in1(in1),
	.in2(in2),
	.in4(in4),
	.in5(in5),
	.lighto1(lighto1),
	.lighto2(lighto2),
	.sampler_rx(sampler)
);
endmodule

